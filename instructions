Prompt to Generate a Secure Chat Web Application with React and Vite
Project Description
Create a comprehensive, responsive, and secure web chat application with the following features:
Built with React and Vite as the build tool
Installable Progressive Web App (PWA) functioning in standalone mode
End-to-end encryption (E2EE) transparent to the user
Clean user interface using chadcn/ui
Full support for text chat, emojis, and file sharing
Integrated preview and playback of media (images, audio, video)
Complete unit and functional tests
Detailed documentation
Technical Architecture
Technology Stack
Frontend: React 18+ with TypeScript and Vite
Backend: Express.js or Firebase
Database: Firebase Firestore or MongoDB
Authentication: Firebase Auth, Supabase Auth, or Auth0
UI: chadcn/ui (adapted for React + Vite)
State Management: Zustand or Redux Toolkit
Testing: Vitest, React Testing Library, Playwright
PWA: Vite PWA plugin
Project Structure
Organize the project according to a clear modular architecture:
/src
/components - Reusable UI components
/hooks - Custom hooks
/pages - Main application pages
/services - API and encryption services
/stores - State management
/types - TypeScript types
/utils - Utilities
/tests - Unit and functional tests
/public - Static assets and PWA manifest
Main Features
1. Vite and PWA Configuration
Configure Vite with the official PWA plugin (vite-plugin-pwa)
Configure the manifest for installation
Implement a Service Worker for offline functionality
Add icons of different sizes
Configure strategic caching for optimal offline experience
Implement push notifications (optional)
2. End-to-End Encryption (E2EE)
Use the Web Crypto API for client-side encryption
Implement the Signal protocol (libsignal-protocol-javascript) or Olm for messaging
Establish a secure key exchange system (Diffie-Hellman or similar)
Store private keys locally only (secure localStorage or IndexedDB)
Ensure the server can never access decrypted messages
3. User Interface
Adapt chadcn/ui to work with React + Vite
Create a responsive UI that works on mobile, tablet, and desktop
Implement dark/light mode with system theme as default
Create an intuitive chat interface with:
Conversation list on the left (responsive on mobile)
Main chat area with messages and media
Send toolbar at the bottom
4. Messaging and Media
Support for text messages with minimal formatting (light markdown)
Emoji selector with search
File upload and sharing (images, audio, video, documents)
Previews for:
Images (thumbnails with lightbox)
Audio (built-in player with controls)
Video (responsive player)
Other files (display name and size with download link)
Status indicators (sent, received, read)
Support for ephemeral messages
Testing and Quality Assurance
Unit Tests
Configure Vitest for unit testing
Tests for encryption utilities
Tests for isolated UI components
Tests for custom hooks and business logic
Functional Tests
End-to-end tests with Playwright simulating complete conversations
PWA installation tests
Offline functionality tests
Performance tests
Documentation
README.md
The README should contain:
Project description
Main features
Detailed technical architecture
Installation and deployment instructions
Development guide
Details on E2EE encryption
Test results
Screenshots
License and contact information